<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/10/03/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>为什么Lambda表达式中的变量需要是Final或是Effectively Final</title>
    <url>/2022/10/04/%E4%B8%BA%E4%BB%80%E4%B9%88Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%E7%9A%84%E5%8F%98%E9%87%8F%E9%9C%80%E8%A6%81%E6%98%AFFinal%E6%88%96%E6%98%AFEffectively-Final/</url>
    <content><![CDATA[<h4 id="1-什么是lambda表达式？"><a href="#1-什么是lambda表达式？" class="headerlink" title="1.什么是lambda表达式？"></a>1.什么是lambda表达式？</h4><p>我们先来看一下代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Anno</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Function&lt;Integer, Integer&gt; <span class="title function_">incrementer</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> step)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Integer i) -&gt; i + step;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Function&lt;Integer, Integer&gt; <span class="title function_">annoIncrementer</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> step)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Function</span>&lt;Integer, Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Integer <span class="title function_">apply</span><span class="params">(Integer i)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> i + step;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意到，Anno类中提供了两个方法incrementer和annoIncrementer，两个方法是等效的。这里我们可以认为lambda其实是一种匿名类。</p>
<p>而我们创建lambda表达式其实就是创建了一个实现Function接口的类的实例，参考以下代码输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Function&lt;Integer, Integer&gt; inc = Anno.incrementer(<span class="number">1</span>);</span><br><span class="line">        log.info(inc.getClass().getName());</span><br><span class="line">        log.info(inc.getClass().getSuperclass().getName());</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;&quot;</span>, inc.getClass().getInterfaces().length);</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;&quot;</span>, inc.getClass().getInterfaces()[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在，回想一下，Java创建对象是存放在哪里的？没错，堆上（暂不需考虑逃逸分析高级特性）。</p>
<h4 id="2-实例变量-amp-成员变量-amp-局部变量"><a href="#2-实例变量-amp-成员变量-amp-局部变量" class="headerlink" title="2.实例变量&amp;成员变量&amp;局部变量"></a>2.实例变量&amp;成员变量&amp;局部变量</h4><p>Java中变量有三种，实例变量、成员变量和局部变量。</p>
<p>那么这三种变量有什么区别呢？从存放位置思考一下🤔</p>
<blockquote>
<p>没错，实例变量和成员变量都是存放在堆上，只有局部变量存放在栈中。</p>
</blockquote>
<h4 id="3-捕获lambda中的变量"><a href="#3-捕获lambda中的变量" class="headerlink" title="3.捕获lambda中的变量"></a>3.捕获lambda中的变量</h4><p>现在，对于这段代码当lambda表达式返回之后，还能继续使用吗？</p>
<p>对于实例变量和成员变量，同样和lambda表达式的实例存放在堆上，自然没有问题。而对于局部变量，方法结束，栈中的数据会被清理。此时，lambda实例要如何继续使用局部变量呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Function&lt;Integer, Integer&gt; <span class="title function_">incrementer</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> step)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (Integer i) -&gt; i + step;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Java中采用的方式为复制。</p>
<p>那么，即然是复制，如果变量一直在改变。我们复制到的值还正确吗？</p>
<p>答案是否定的。JVM复制的值是一个冻结值，是无法变化的。所以，这里就必须要求局部变量必须是final或effectively final（只赋值一次）的。</p>
<hr>
<p>参考文档：</p>
<p><a href="https://www.baeldung.com/java-lambda-effectively-final-local-variables">https://www.baeldung.com/java-lambda-effectively-final-local-variables</a></p>
<p><a href="https://www.javacodegeeks.com/2021/12/lambda-and-final-variables.html">https://www.javacodegeeks.com/2021/12/lambda-and-final-variables.html</a></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Lambda</tag>
      </tags>
  </entry>
</search>
